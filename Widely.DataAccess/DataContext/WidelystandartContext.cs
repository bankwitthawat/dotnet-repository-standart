// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Widely.DataAccess.DataContext.Entities;

#nullable disable

namespace Widely.DataAccess.DataContext
{
    public partial class WidelystandartContext : DbContext
    {
        public WidelystandartContext()
        {
        }

        public WidelystandartContext(DbContextOptions<WidelystandartContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Appusers> Appusers { get; set; }
        public virtual DbSet<Authtokens> Authtokens { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            modelBuilder.Entity<Appusers>(entity =>
            {
                entity.ToTable("appusers");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .UseCollation("utf8mb4_0900_ai_ci")
                    .HasCharSet("utf8mb4");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .UseCollation("utf8mb4_0900_ai_ci")
                    .HasCharSet("utf8mb4");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .HasColumnName("FName")
                    .UseCollation("utf8mb4_0900_ai_ci")
                    .HasCharSet("utf8mb4");

                entity.Property(e => e.LastChangePwd).HasColumnType("datetime");

                entity.Property(e => e.LastLogin).HasColumnType("datetime");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .HasColumnName("LName")
                    .UseCollation("utf8mb4_0900_ai_ci")
                    .HasCharSet("utf8mb4");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(100)
                    .UseCollation("utf8mb4_0900_ai_ci")
                    .HasCharSet("utf8mb4");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .UseCollation("utf8mb4_0900_ai_ci")
                    .HasCharSet("utf8mb4");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .UseCollation("utf8mb4_0900_ai_ci")
                    .HasCharSet("utf8mb4");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("utf8mb4_0900_ai_ci")
                    .HasCharSet("utf8mb4");
            });

            modelBuilder.Entity<Authtokens>(entity =>
            {
                entity.ToTable("authtokens");

                entity.HasIndex(e => e.UserId, "UserID_idx");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ExpiresOn).HasColumnType("datetime");

                entity.Property(e => e.IssuedOn).HasColumnType("datetime");

                entity.Property(e => e.MachineName).HasMaxLength(1000);

                entity.Property(e => e.RequestIp)
                    .HasMaxLength(50)
                    .HasColumnName("RequestIP");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.UserAgent).HasMaxLength(1000);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Authtokens)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserID_ID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}